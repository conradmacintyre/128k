{"version":3,"sources":["functions.js"],"names":["Superstars","Contextr","a","undefined","Strength","Stat","Wrestler","Attribute","Overall","total","Disabled","Tiredness","Fatigue","Injured","num","Math","random","Injury","SuperstarSelector","Roster","RosterWrap","document","getElementById","innerHTML","keys","i","push","length","ShortName","disabled","Name","Morale","Wins","Losses","onclick","Wrestlers","querySelectorAll","Fighters","getAttribute","console","log","Rank","Viewers","who","ttl","Popularity","parts","NumGen","Win","indexOf","max","apply","Winner","Lose","min","Loser","each","Technique","parseInt","toString","split","replace","join","StartFight","ShowRoster","addEventListener","classList","contains","remove","removeAttribute","add","setAttribute","children","offsetHeight","inputs","checked"],"mappings":"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","sourcesContent":["//JSHINT-SPECIFIC THINGS\n//jshint multistr: true\n\n//Declared so JSLINT leaves me alone about it\nvar Superstars;\n\n//Make sure any given Superstar is attached to it's appropriate object\nvar Contextr = function(a) {\n\tif (a.Strength === undefined) {\n\t\treturn Superstars[a];\n\t}\n\treturn a;\n}; \n\n//Return a stat\nvar Stat = function(Wrestler,Attribute) {\n\tWrestler = Contextr(Wrestler);\n\tvar value = Wrestler[Attribute];\n\n\treturn value;\n};\n\n//Calculate Overall\nvar Overall = function(Wrestler) {\n\tvar total = 0;\n\ttotal += Stat(Wrestler,'Strength');\n\ttotal += Stat(Wrestler,'Technique');\n\ttotal += Stat(Wrestler,'Speed');\n\ttotal += Stat(Wrestler,'Mind');\n\ttotal += Stat(Wrestler,'Nerve');\n\ttotal += Stat(Wrestler,'Heart');\n\ttotal += Stat(Wrestler,'Charisma');\n\ttotal += Stat(Wrestler,'Popularity');\n\ttotal += Stat(Wrestler,'Durability');\n\ttotal += Stat(Wrestler,'Finisher');\n\treturn total;\n};\n\n//Injury-checker\nvar Disabled = function(Wrestler) {\n\t//Get wrestler\n\tWrestler = Contextr(Wrestler);\n\t//Get fatigue\n\tvar Tiredness = Wrestler.Fatigue;\n\t//Injury calculator\n\tfunction Injured(num) {\n\t\tif ( Math.random() > num ) {\n\t\t\tWrestler.Injury = true;\n\t\t\treturn 'disabled';\n\t\t}\n\t}\n\t//Odds of injury\n\tif (Tiredness >= 10) {\n\t\tInjured(0.8);\n\t} else if (Tiredness >= 9) {\n\t\tInjured(0.85);\n\t} else if (Tiredness >= 8) {\n\t\tInjured(0.9);\n\t} else {\n\t\tInjured(0.95);\n\t}\n};\n\n//Comma-Separate Large Numbers\nfunction Comma(num) {\n    var parts = num.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n\n//Layout Roster for selection\nfunction SuperstarSelector(Roster) {\n\t//Get the element that the roster will be listed in\n\tvar RosterWrap = document.getElementById('Roster');\n\t//Empty it\n\tRosterWrap.innerHTML = '';\n\t//Create an array for all the brand's superstars\n\tvar keys = [];\n    //Loop through the roster, adding them to the above array\n    for (var i in Roster) {\n        keys.push(i);\n    }\n    //Loop through each wrestler\n    for (i=0; i<keys.length; i++) {\n\t    //Get their object name\n    \tvar ShortName = keys[i];\n    \t//Get their actual name\n    \tvar Wrestler = Contextr(ShortName);\n    \t//Define teh disabled variable\n    \tvar disabled = '';\n    \t//If the wrestler is injured, set them as disabled\n    \tif (Wrestler.Injury === true) { \n\t    \tdisabled = 'disabled';\n\t    }\n\t    //Populate the roster-select element with this, for each wrestler\n    \tRosterWrap.innerHTML \n    \t\t+= \t'<input type=\"checkbox\" id=\"' + ShortName + '\" ' + disabled + '>'\n    \t\t+ \t'<label class=\"Wrestler\" style=\"background-image:url(img/' + ShortName + '.png)\" for=\"' + ShortName + '\">'\n    \t\t+ \t\t'<div class=\"DarkBG\">'\n\t\t    + \t\t\t'<p class=\"Name\">'\n\t\t    + \t\t\t\tWrestler.Name\n\t\t    + \t\t\t'</p>'\n\t\t    + \t\t\t'<p class=\"Overall\" title=\"Overall\">'\n\t\t    + \t\t\t\t'<b>O</b><br>' + Overall(ShortName)\n\t\t    + \t\t\t'</p>'\n\t\t    + \t\t\t'<p class=\"Morale\">'\n\t\t    + \t\t\t\t'<b>M</b><br>' + Wrestler.Morale\n\t\t    + \t\t\t'</p>'\n\t\t    + \t\t\t'<p class=\"Fatigue\">'\n\t\t    + \t\t\t\t'<b>F</b><br>' + Wrestler.Fatigue\n\t\t    + \t\t\t'</p>'\n\t\t    + \t\t\t'<p class=\"Wins\">'\n\t\t    + \t\t\t\t'<b>W</b><br>' + Wrestler.Wins\n\t\t    + \t\t\t'</p>'\n\t\t    + \t\t\t'<p class=\"Losses\">'\n\t\t    + \t\t\t\t'<b>L</b><br>' + Wrestler.Losses\n\t\t    + \t\t\t'</p>'\n\t    \t+ \t\t'</div>'\n    \t\t+ \t'</label>'\n    \t;\n    }\n}\n\n//Fight simulator\nfunction StartFight(Wrestlers){\n\tconsole.log('FIGHT STARTED');\n\t//The match rankings\n\tvar Rank = [];\n\t//The match rating\n\tvar Viewers = 0;\n\t//Loop through each wrestler submitted\n\tfor (var i=0; i<Wrestlers.length; i++) {\n\t\t//Get each wrestler's stats\n\t\tvar who = Contextr(Wrestlers[i]);\n\t\tvar ovr = Overall(who);\n\t\tvar rnd = (Math.random() * 10);\n\t\tvar mrl = who.Morale;\n\t\tvar ftg = who.Fatigue;\n\t\tvar ttl = ovr + rnd + mrl - ftg;\n\t\t//Add them to an array\n\t\tRank.push( ttl );\n\t\t//Add their popularity to the match rating\n\t\tViewers += who.Popularity * 10;\n\t}\n\t\n\t//Get the position of the highest overall\n\tvar Win = Rank.indexOf(Math.max.apply(Math, Rank));\n\tvar Winner = Contextr([Wrestlers[Win]]);\n\t//Get the position of the lowset overall\n\tvar Lose = Rank.indexOf(Math.min.apply(Math, Rank));\n\tvar Loser = Contextr([Wrestlers[Lose]]);\n\t\n\t//Subtract the difference between the winner and the loser\n\tViewers -= (Rank[Win] - Rank[Lose]) * 10;\n\t\n\t//Adjust everyone's stats\n\tfor (var each in Superstars) {\n\t\t//Define THIS wrestler\n\t\tvar Wrestler = Contextr(each);\n\t\t//If THIS wrestler is in the match\n        if ( Wrestlers.indexOf(each) > -1 ) {\n\t        if (Wrestler.Morale <= 9.5){\n\t        \tWrestler.Morale += 0.25;\n\t        }\n\t        if (Wrestler.Fatigue <= 9.75){\n\t\t\t\tWrestler.Fatigue += 0.25;\n\t\t\t}\n\t\t\t//Check each participating superstar for injury\n\t\t\tDisabled(each);\n\t\t//If THIS wrestler is NOT in the match\n        } else {\n\t        if (Wrestler.Morale >= 0.25){\n\t        \tWrestler.Morale -= 0.25;\n\t        }\n\t        if (Wrestler.Fatigue >= 0.25){\n\t\t\t\tWrestler.Fatigue -= 0.25;\n\t\t\t}\n\t\t\tif (Wrestler.Injury === true && Wrestler.Fatigue <= 5){\n\t        \tWrestler.Injury = false;\n\t        }\n        }\n    }\n\t\n\t//Adjust stats of the winning superstar\n\tWinner.Wins += 1;\n\tif (Winner.Morale <= 8.5){\n\t\tWinner.Morale += 1;\n\t}\n\tif (Winner.Fatigue >= 0.25){\n\t\tWinner.Fatigue -= 0.25;\n\t}\n\t//Adjust stats of the losing superstar\n\tLoser.Losses += 1;\n\tif (Loser.Morale >= 0.5){\n\t\tLoser.Morale -= 0.5;\n\t}\n\tif (Loser.Fatigue <= 9.5){\n\t\tLoser.Fatigue += 0.5;\n\t}\n\t\n\tvar VictoryType = function() {\n\t\tvar NumGen = Math.random() * 10;\n\t\tif (NumGen > 9.5) {\n\t\t\treturn 'knockout';\n\t\t} else if (NumGen > 8.5 && Winner.Technique <= Loser.Technique || NumGen > 7 && Winner.Technique >= Loser.Technique) {\n\t\t\treturn 'submission';\n\t\t} else {\n\t\t\treturn 'pinfall';\n\t\t}\n\t};\n\t\n\tvar RealViewers = function() {\n\t\tViewers = parseInt(Viewers * 1000);\n\t\tif (Viewers >= 1000) {\n\t\t\treturn Viewers;\n\t\t} else {\n\t\t\treturn 1000;\n\t\t}\n\t};\n\t\n\tdocument.getElementById('WinnerName').innerHTML \n\t\t= Winner.Name\n\t\t+ ' def. ' \n\t\t+ Loser.Name \n\t\t+ ' via '\n\t\t+ VictoryType()\n\t\t+ ', with ' \n\t\t+ Comma(RealViewers()) \n\t\t+ ' viewers.'\n\t\t+ '<br>'\n\t\t+ document.getElementById('WinnerName').innerHTML\n\t;\n\t\n/*\n\tdocument.getElementById('MatchVewiers').innerHTML \n\t\t= '<br>' \n\t\t+ Comma(parseInt(Viewers * 1000)) \n\t\t+ document.getElementById('MatchVewiers').innerHTML\n\t;\n*/\n\t\n\tSuperstarSelector(Superstars);\n}\n\n//Hook up the fight button\ndocument.getElementById('Fight').onclick = function(){\n\tvar Wrestlers = document.querySelectorAll('input:checked');\n\tvar Fighters = [];\n\tfor (var i=0; i<Wrestlers.length; i++) {\n\t\tFighters.push(Wrestlers[i].getAttribute('id'));\n\t}\n\tconsole.log(Fighters);\n\tStartFight(Fighters);\n};\n\n//Hook up the roster reveal\nvar ShowRoster = document.getElementById('RosterButton');\nvar RosterWrap = document.getElementById('RosterWrapper');\nShowRoster.addEventListener('click', function(){\n\tvar className = 'open';\n\tif (RosterWrap.classList.contains(className) && ShowRoster.classList.contains(className)) {\n\t\tShowRoster.classList.remove(className);\n\t\tRosterWrap.classList.remove(className);\n\t\tRosterWrap.removeAttribute('style');\n\t} else {\n\t\tShowRoster.classList.add(className);\n\t\tRosterWrap.classList.add(className);\n\t\tRosterWrap.setAttribute('style','height:'+RosterWrap.children[0].offsetHeight+'px;');\n\t}\n});\n\n//All-In\n(function(){\n\tdocument.getElementById('allin').onclick = function(){\n\t\tvar inputs = document.querySelectorAll('input:not(:disabled)');\n\t\tfor (var i=0; i<inputs.length; i++) {\n\t\t\tinputs[i].checked = true;\n\t\t}\n\t};\n\t\n})();\n\n//Init!\nSuperstarSelector(Superstars);"]}