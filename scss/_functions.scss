//**************************************************************
// Function_Name
//**************************************************************
	// Function_description
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@function funcName($input) {}

//**************************************************************
// Explode String
//**************************************************************
	// Explodes a SASS string using any arbitrary delimiter
	//
	// @param {String} $string - The input string
	// 
	// @return {String} $delimiter - The delimiter for 
	// exploding the string
	//**********************************************************
	@function explode($string, $delimiter) {
		$result: ();
		@if $delimiter == "" {
			@for $i from 1 through str-length($string) {
				$result: append($result, str-slice($string, $i, $i));
			}
			@return $result;
		}
		$exploding: true;
		@while $exploding {
			$d-index: str-index($string, $delimiter);
			@if $d-index {
				@if $d-index > 1 {
					$result: append($result, str-slice($string, 1, $d-index - 1));
					$string: str-slice($string, $d-index + str-length($delimiter));
				} @else if $d-index == 1 {
					$string: str-slice($string, 1, $d-index + str-length($delimiter));
				} @else {
					$result: append($result, $string);
					$exploding: false;
				}
			} @else {
				$result: append($result, $string);
				$exploding: false;
			}
		}
		@return $result;
	}

//**************************************************************
// Function_Name
//**************************************************************
	// Function_description
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@function col-calc($input) {
		@if ($input <= $grid-column-count) {
			@return percentage( $input / $grid-column-count );
		} @else {
			@warn "Grid count too high";
			@return false;
		}
	}

//**************************************************************
// Strip Unit by Hugo Giraudel
//**************************************************************
	// Remove the unit of a length
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@function strip-unit($number) {
		@if type-of($number) == 'number' and not unitless($number) {
			@return $number / ($number * 0 + 1);
		}
		@return $number;
	}

//**************************************************************
// Add Unit
//**************************************************************
	// Adds a 'px' or 'rem' value to a unitless number, based 
	// on value.
	//
	// @param {Number} $number - Number to add unit to
	//**********************************************************
	@function add-unit($number) {
		$number: strip-unit($number);
		@if $number >= 10 {
			@return $number * 1px;
		}
		@return $number * 1rem;
	}

//**************************************************************
// Contrast Checker
//**************************************************************
	// Return a color that maximises contrast
	//
	// @param {String} $bg - The background color to check 
	// against
	// 
	// @param {String} $dark - The DARK colour to return
	// 
	// @param {Boolean} $lite - The LIGHT colour to return
	//**********************************************************
	@function contrast($bg, $dark:$shade-dark, $lite:$shade-lite) {
		@if (lightness($bg) > 50) {
			@return $dark;
		} @else {
			@return $lite;
		}
	}

//**************************************************************
// Get Next Item in SASS Map (Simon Koch)
//**************************************************************
	// returns next map item or fallback value if map, key 
	// or previous item does not exist
	//
	// @param {Map} $map - Sass list map
	// 
	// @param {String} $key - List map key
	// 
	// @param {Boolean} $fallback (false) - Fallback value if 
	// map, key or previous item does not exist
	// 
	// @param {String} $return (value) - Return value or key of 
	// previous list item
	//**********************************************************
	@function map-get-next($map, $key, $fallback: false, $return: value) {
		@if type-of($map) == map {
		    @if map-has-key($map, $key) {
		        $i: 0;
		        $key-index: false;
		        @each $map-key, $map-value in $map {
		            $i: $i + 1;
		            @if $map-key == $key {
		                $key-index: $i;
		            }
		            @if $i == $key-index + 1 {
		                @if $return == key {
		                    @return $map-key;
		                } @else {
		                    @return $map-value;
		                }
		            }
		            @if $i == length($map) {
		                @return $fallback;
		            }
		        }
		        @return $fallback;
		    }
		    @warn 'No valid key #{$key} in map';
		    @return $fallback;
		}
		@warn 'No valid map';
		@return $fallback;
	}

//**************************************************************
// Get Previous Item in SASS Map (Simon Koch)
//**************************************************************
	// returns previous map item or fallback value if map, key 
	// or previous item does not exist
	//
	// @param {Map} $map - Sass list map
	// 
	// @param {String} $key - List map key
	// 
	// @param {Boolean} $fallback (false) - Fallback value if 
	// map, key or previous item does not exist
	// 
	// @param {String} $return (value) - Return value or key of 
	// previous list item
	//**********************************************************
	@function map-get-prev($map, $key, $fallback: false, $return: value) {
	    @if type-of($map) == map {
	        @if map-has-key($map, $key) {
	            $i: 1;
	            $key-index: false;
	            $previous-index: false;
	            @each $map-key, $map-value in $map {
	                @if $map-key == $key {
	                    $key-index: $i;
	                }
	                $i: $i + 1;
	            }
	            @if $key-index != false {
	                $previous-index: $key-index - 1;
	                $i: 1;
	                @if $previous-index < 1 {
	                    @return $fallback;
	                }
	                @else {
	                    @each $map-key, $map-value in $map {
	                         @if $i == $previous-index {
	                            @if $return == 'key' {
	                                @return $map-key;
	                            }
	                            @else {
	                                @return $map-value;
	                            }
	                        }
	                        $i: $i + 1;
	                    }
	                }
	            }
	            @else {
	                @return $fallback;
	            }
	        }
	        @else {
	            // @warn 'No valid key #{$key} in map';
	            @return $fallback;
	        }
	    }
	    @else {
	        // @warn 'No valid map';
	        @return $fallback;
	    }
	}

//******************************************************************
// Browser Hacks
//******************************************************************
	// Allows targeted "hacks" for a single browser
	//
	// @param {Keyword} $browser - The name of the browser you want
	// to hack
	//**************************************************************
	@mixin hack ( $browser ) {
		$browser: to-lower-case($browser);
		@if ($browser == ie or edge) {
			@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
				@content;
			}
		} @else if ($browser == safari) {
			$mh: '\\0 screen';
			@media #{$mh} {
				@content;
			}
		} @else if ($browser == firefox or ff) {
			@supports (-moz-appearance:meterbar) and (background-blend-mode:difference,normal) {
				@content;
			}
		} @else if ($browser == chrome) {
			@media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm) {
				@content;
			}
		} @else {
			@warn 'No supported browser given';
		}
	}

//******************************************************************
// Breakpoint Calculator
//******************************************************************
	// Define your breakpoints in the _variables file, then just
	// use keywords with this mixin to wrap CSS rules in the needed
	// media queries without worrying about the specifics. 
	//
	// @param {Keyword} $size - one of the keys from the 
	// $breakpoints map in _variables
	// 
	// @param {Keyword} $direction - One of "up", "down", or "only"
	//**************************************************************
	@mixin bp ( $size, $direction:up ) {
		@if ($direction == down) {
			@if (map-get-next($breakpoints,$size)) {
				@media (max-width: #{ map-get-next($breakpoints,$size) - 1px } ) {
					@content;
				}
			} @else {
				@content;
			}
		} @else if ($direction == up) {
			@if (map-get-prev($breakpoints,$size)) {
				@media (min-width: #{map-get($breakpoints,$size)}) {
					@content;
				}
			} @else {
				@content;
			}
		} @else if ($direction == only) {
			@if ( map-get-prev($breakpoints,$size) and map-get-next($breakpoints,$size) ) {
				@media ( min-width: #{map-get( $breakpoints, $size )} ) and (max-width: #{map-get-next($breakpoints,$size) - 1px}) {
					@content;
				}
			} @else if ( map-get-prev($breakpoints,$size) ) {
				@media ( min-width: #{map-get( $breakpoints, $size )} ) {
					@content;
				}
			} @else if ( map-get-next($breakpoints,$size) ) {
				@media (max-width: #{map-get-next($breakpoints,$size) - 1px}) {
					@content;
				}
			} @else {
				@content;
			}
		} @else {
			@warn 'invalid direction given';
		}
	}

//**************************************************************
// Row Maker
//**************************************************************
	// Outputs containers for grid-constrained content, here
	// defined as "rows" for ease of conception.
	//
	// @param {Boolean} $constrain - Keep within $layout-width
	// 
	// @param {Keyword} $orientation - Determines the flow of 
	// child elements, "vertical" or "horizontal" are accepted.
	// 
	// @param {Boolean} $wrap - Allows or disallows wrapping of
	// child elements
	//**********************************************************
	@mixin row($constrain:true, $orientation:horizontal, $wrap:true) {
		// display: flex;
		display: grid;
		grid-template-columns: repeat($grid-column-count,1fr);
		grid-row-gap: 0;
		grid-column-gap: $grid-gutters-default;
		width: 100%;
		
		@if ($constrain == true) {
			max-width: $layout-width;
			margin-left: auto;
			margin-right: auto;
		}
		@if ($orientation == vertical) {
			flex-direction: column;
		}
		@if ($wrap == true) {
			flex-wrap: wrap;
		}
	}

//***************************************************************
// Column Maker
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Arglist} $cols - takes a Keyword followed by a 
	// Numbereach pair should be separated by a comma. The
	// Keyword should be one of the keys in $breakpoints and 
	// the Number should be a value not greater than 
	// $grid-column-count. FOR EXAMPLE, you might put:
	// "sm 12, md 6, lg 3". 
	//**********************************************************
	@mixin column($cols...) {
		display: block;
		@if ( length( $cols ) > 0 ) {
			@each $col in $cols {
				@if ( length( $col ) == 2 ) {
					$size: nth( $col, 1 );
					$columns: nth( $col, 2 );

					@if ( map-get( $breakpoints, $size ) ) {
						@include bp( $size ) {
							grid-column-end: span $columns;
						}
					} @else {
						// @warn 'breakpoint does not exist';
					}
				} @else {
					// @warn 'incorrect numbers of args passed (`#{$col}`)';
				}
			}
		} @else {
			grid-column-end: span $grid-column-count;
		}
	}

//***************************************************************
// Column Shifter
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Arglist} $cols - takes a Keyword followed by a 
	// Numbereach pair should be separated by a comma. The
	// Keyword should be one of the keys in $breakpoints and 
	// the Number should be a value not greater than 
	// $grid-column-count. FOR EXAMPLE, you might put:
	// "sm 12, md 6, lg 3". 
	//**********************************************************
	@mixin shift($cols...) {
		display: block;
		@if ( length( $cols ) > 0 ) {
			@each $col in $cols {
				@if ( length( $col ) == 2 ) {
					$size: nth( $col, 1 );
					$columns: nth( $col, 2 ) + 1;

					@if ( map-get( $breakpoints, $size ) ) {
						@include bp( $size ) {
							grid-column-start: $columns;
						}
					} @else {
						// @warn 'breakpoint does not exist';
					}
				} @else {
					// @warn 'incorrect numbers of args passed (`#{$col}`)';
				}
			}
		}
	}

//***************************************************************
// Billboard
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Keyword} $valign - Takes keyword for vertical 
	// 		alignment. Accepts 'top', 'middle', and 'bottom'.
	// @param {Keyword} $halign - Takes keyword for horizontal
	// 		alignment. Accepts 'left', 'center', and 'right'.
	// @param {Number(s)} $content-width - Any single numerical
	// 		value or list of numerical values. You can use 
	// 		column counts, percentages (with or without a unit), 
	// 		or any arbitrary value. A list of values will be
	// 		applied to subsequent breakpoints in order from 
	// 		smallest to biggest.
	// @param {Number(s)} $height - Any single numerical value 
	// 		or list of numerical values. You can use pixel
	//		heights (with or without a unit), or any 
	// 		arbitrary value WITH a unit. A list of values will
	// 		be applied to subsequent breakpoints in order from 
	// 		smallest to biggest.
	// @param {String} $text-color - Any valid CSS value for
	// 		'color'. 
	// @param {String} $header-color - Any valid CSS value for
	// 		'color'.
	//**********************************************************
	@mixin billboard($valign:middle, $halign:center, $content-width:100 50 33, $height:400 500 600, $text-color:$shade-lite, $header-color:inherit) {
		@include row;
		position: relative;
		overflow: hidden;
		@if ( type_of($height) == list ) {
			@each $bp, $value in $breakpoints {
				@include bp( $bp ) {
					$relative-height: nth( $height, index( ( $breakpoints ), ( $bp $value ) ) );
					@if ( type_of( $relative-height ) == number and unitless( $relative-height ) ) {
						min-height: $relative-height * 1px;
					} @else {
						min-height: $relative-height;
					}
				}
			}
		} @else {
			min-height: $height;
		}
		&-slide {
			background-size: cover;
			background-position: center;
			@include column;
			display: flex;
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			color: $text-color;
			flex-direction: column;
			@include gutters($h:true);
			@if ($valign == top) {
				justify-content: flex-start;
			} @else if ($valign == bottom) {
				justify-content: flex-end;	
			} @else if ($valign == middle or center or centre) {
				justify-content: center;
			} @else {
				@warn '#{$valign} is an invalid vertical alignment, please use top, middle, or bottom';
			}
			@if ($halign == left) {
				align-items: flex-start;
				text-align: left;
			} @else if ($halign == right) {
				align-items: flex-end;
				text-align: right;	
			} @else if ($halign == middle or center or centre) {
				align-items: center;
				text-align: center;
			} @else {
				@warn '#{$halign} is an invalid horizontal alignment, please use left, center, or right';
			}
			&.top {
				justify-content: flex-start; 
			}
			&.middle {
				justify-content: center;
			}
			&.bottom {
				justify-content: flex-end;
			}
			&.left {
				align-items: flex-start;
				text-align: left;
			}
			&.center {
				align-items: flex-end;
				text-align: right;
			}
			&.right {
				align-items: flex-end;
				text-align: right;
			}
			transition: transform 0.6s linear;
			transform: translateX(-100%);
			&.active {
				transform: translateX(0%);
			}
			&.active ~ & {
				transform: translateX(100%);
			}
			> * {
				@if (type_of($content-width) == list) {
					@each $bp, $value in $breakpoints {
						@include bp($bp) {
							$relative-width: nth( $content-width, index( ($breakpoints), ($bp $value) ) );
							@if (type_of($relative-width) == number) {
								@if ($relative-width <= $grid-column-count) {
									max-width: col-calc($relative-width);
								} @else if ( unit( $relative-width ) == '%' ) {
									max-width: $relative-width;
								} @else {
									max-width: percentage($relative-width / 100);
								}
							} @else {
								max-width: $relative-width;
							}
						}
					}
				} @else {
					max-width: $content-width;
				}
			}
			h1, h2, h3, h4, h5, h6 {
				color: $header-color;
				margin-bottom: 0;
			}
		}
	}

//**************************************************************
// Button Maker
//**************************************************************
	// Makes Buttons
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin button( $bg-color:$button-bg-color, $shade-shift:$button-shade-shift, $type:$button-type ) {
		display: inline-flex;
		border: 2px solid $bg-color;
		@if ( $type == hollow ) {
			background-image: linear-gradient(130deg, rgba(0,0,0,0) 50%, rgba(0,0,0,0.25) 50%);
		} @else if ( $shade-shift == lighten ) {
			background-image: linear-gradient(130deg, $color-primary 50%, lighten($color-primary, 50%) 50%);
		} @else {
			background-image: linear-gradient(130deg, $color-primary 50%, darken($color-primary, 50%) 50%);
		}
		border-radius: 3px;
		padding: 15px 25px;
		font-weight: bold;
		text-decoration: none;
		text-transform: uppercase;
		@if ( $type == hollow ) {
			color: $bg-color;
		} @else {
			color: contrast($bg-color);
		}
		background-size: 250%;
		background-position: 0% center;
		cursor: pointer;
		transition: all 0.5s ease;
		&:hover,
		&:active {
			background-position: 100% center;
			@if ( $type != hollow ) {
				color: contrast(lighten($bg-color, 50%));
			}
		}
	}

//**************************************************************
// Alert Maker
//**************************************************************
	// Makes Alert Boxes
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin alert( $bg:$primary-color, $link:false, $text:auto, $contained:true ) {
		display: block;
		max-width: 100%;
		background: $bg;
	    padding-top: 4px;
	    cursor: pointer;
	    font-weight: 500;
		font-size: 80%;
		line-height: 4;
		transition: letter-spacing 0.5s ease;
		line-height: 1.3;

		@if ($contained == true) {
		    padding: 15px;
		    border-radius: 5px;
		    border: 1px solid darkred;
		    margin: 10px 0;
		} @else {
			padding: 20px 0;
		}

		@if ($text == auto) {
	    	color: contrast($bg);
	    } @else {
	    	color: $text;
	    }

		@if ($link == true) {
			text-decoration: none;
			&:hover {
				text-decoration: none;
			}
		}
	    * {
	    	color: inherit;
			font-weight: inherit;
			letter-spacing: inherit;
			font-size: inherit;
			line-height: inherit;
			cursor: inherit;
			margin-bottom: 0;
	    }
	}

//**************************************************************
// Include Responsive Gutters
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin gutters($type:padding, $h:false) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				--bp: #{$bp};
				@if ( map-get( $grid-gutters, $bp ) ) {
					@if ($type = padding) {
						padding-left: map-get( $grid-gutters, $bp );
						padding-right: map-get( $grid-gutters, $bp );
						@if ($h = true) {
							padding-top: map-get( $grid-gutters, $bp );
							padding-bottom: map-get( $grid-gutters, $bp );
						}
					} @else if ($type = margin) {
						margin-left: map-get( $grid-gutters, $bp );
						margin-right: map-get( $grid-gutters, $bp );
						@if ($h = true) {
							margin-top: map-get( $grid-gutters, $bp );
							margin-bottom: map-get( $grid-gutters, $bp );
						}
					}
				} @else {
					@warn 'no bp??';
				}
			}
		}
	}

//**************************************************************
// Include Responsive Spacer Margins
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin spacer($location:both) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				@if ( map-get( $vertical-spacing, $bp ) ) {
					@if ($location == both) {
						margin-top: map-get( $vertical-spacing, $bp );
						margin-bottom: map-get( $vertical-spacing, $bp );
					} @else if ($location == top) {
						margin-top: map-get( $vertical-spacing, $bp );
					} @else if ($location == bottom) {
						margin-bottom: map-get( $vertical-spacing, $bp );
					} @else {
						@warn 'invalid location passed to spacer';
					}
				}
			}
		}
	}

//**************************************************************
// Include Responsive Spacer Margins
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	













