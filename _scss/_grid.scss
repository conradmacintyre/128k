//**************************************************************
// Row Maker
//**************************************************************
	// Outputs containers for grid-constrained content, here
	// defined as "rows" for ease of conception.
	//
	// @param {Boolean} $constrain - Keep within $layout-width
	// 
	// @param {Keyword} $orientation - Determines the flow of 
	// child elements, "vertical" or "horizontal" are accepted.
	// 
	// @param {Boolean} $wrap - Allows or disallows wrapping of
	// child elements
	//**********************************************************
	@mixin row($constrain:true, $orientation:horizontal, $wrap:true, $h-gutter:false) {
		// display: flex;
		display: grid;
		grid-template-columns: repeat($grid-column-count,1fr);
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				@if ( map-get( $grid-gutters, $bp ) ) {
					grid-column-gap: map-get( $grid-gutters, $bp );
					@if ($h-gutter == true) {
						grid-row-gap: map-get( $grid-gutters, $bp );
					}
				}
			}
		}
		width: 100%;
		@if ($constrain == true) {
			max-width: $layout-width;
			margin-left: auto;
			margin-right: auto;
		}
		@if ($orientation == vertical) {
			flex-direction: column;
		}
		@if ($wrap == true) {
			flex-wrap: wrap;
		}
	}

//***************************************************************
// Column Maker
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Arglist} $cols - takes a Keyword followed by a 
	// Numbereach pair should be separated by a comma. The
	// Keyword should be one of the keys in $breakpoints and 
	// the Number should be a value not greater than 
	// $grid-column-count. FOR EXAMPLE, you might put:
	// "sm 12, md 6, lg 3". 
	//**********************************************************
	@mixin column($cols...) {
		// display: block;
		@if ( length( $cols ) > 0 ) {
			@each $col in $cols {
				@if ( length( $col ) == 2 ) {
					$size: nth( $col, 1 );
					$columns: nth( $col, 2 );

					@if ( map-get( $breakpoints, $size ) ) {
						@include bp( $size ) {
							grid-column-end: span $columns;
						}
					} @else {
						// @warn 'breakpoint does not exist';
					}
				} @else {
					// @warn 'incorrect numbers of args passed (`#{$col}`)';
				}
			}
		} @else {
			grid-column-end: span $grid-column-count;
		}
	}

//***************************************************************
// Column Shifter
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Arglist} $cols - takes a Keyword followed by a 
	// Numbereach pair should be separated by a comma. The
	// Keyword should be one of the keys in $breakpoints and 
	// the Number should be a value not greater than 
	// $grid-column-count. FOR EXAMPLE, you might put:
	// "sm 12, md 6, lg 3". 
	//**********************************************************
	@mixin shift($cols...) {
		// display: block;
		@if ( length( $cols ) > 0 ) {
			@each $col in $cols {
				@if ( length( $col ) == 2 ) {
					$size: nth( $col, 1 );
					$columns: nth( $col, 2 ) + 1;

					@if ( map-get( $breakpoints, $size ) ) {
						@include bp( $size ) {
							grid-column-start: $columns;
						}
					} @else {
						// @warn 'breakpoint does not exist';
					}
				} @else {
					// @warn 'incorrect numbers of args passed (`#{$col}`)';
				}
			}
		}
	}
	
//**************************************************************
// Include Responsive Gutters
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin gutters($type:padding, $h:false, $v:true) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				--bp: #{$bp};
				@if ( map-get( $grid-gutters, $bp ) ) {
					@if ($type == padding) {
						@if ($v == true) {
							padding-left: map-get( $grid-gutters, $bp );
							padding-right: map-get( $grid-gutters, $bp );
						}
						@if ($h == true) {
							padding-top: map-get( $grid-gutters, $bp );
							padding-bottom: map-get( $grid-gutters, $bp );
						}
					} @else if ($type == margin) {
						@if ($v == true) {
							margin-left: map-get( $grid-gutters, $bp );
							margin-right: map-get( $grid-gutters, $bp );
						}
						@if ($h == true) {
							margin-top: map-get( $grid-gutters, $bp );
							margin-bottom: map-get( $grid-gutters, $bp );
						}
					}
				} @else {
					@warn 'no bp??';
				}
			}
		}
	}

//**************************************************************
// Include Responsive Spacer Margins
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin spacer($location:both, $type:margin) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				@if ( map-get( $vertical-spacing, $bp ) ) {
					@if ($location == both) {
						@if ($type == margin) {
							margin-top: map-get( $vertical-spacing, $bp );
							margin-bottom: map-get( $vertical-spacing, $bp );
						} @else if ($type == padding) {
							padding-top: map-get( $vertical-spacing, $bp );
							padding-bottom: map-get( $vertical-spacing, $bp );
						}
					} @else if ($location == top) {
						@if ($type == margin) {
							margin-top: map-get( $vertical-spacing, $bp );
						} @else if ($type == padding) {
							padding-top: map-get( $vertical-spacing, $bp );
						}
					} @else if ($location == bottom) {
						@if ($type == margin) {
							margin-bottom: map-get( $vertical-spacing, $bp );
						} @else if ($type == padding) {
							padding-bottom: map-get( $vertical-spacing, $bp );
						}
					} @else {
						@warn 'invalid location passed to spacer';
					}
				}
			}
		}
	}

//**************************************************************
// Make Full-Width
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin full-width($grid-contrained:true) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				@if ( map-get( $grid-gutters, $bp ) ) {
					margin-left: map-get( $grid-gutters, $bp ) * -1;
					@if ($grid-contrained == true) {
						width: calc(100% + #{map-get( $grid-gutters, $bp ) * 2});
					} @else {
						width: 100%;
					}
					max-width: 100vw;
				}
			}
		}
	}