// Import Google Fonts
@import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,700;1,400&family=Josefin+Sans:wght@400;700&family=Mynerve&display=swap');

// Text Calc
@function text($txmn, $txmx) {
	@return calc( #{$txmn}px + ( #{$txmx} - #{$txmn} ) * ( ( 100vw - 320px ) / ( 1600 - 320 ) ) );
}

//Variables
	// Basics
	$reset: true;
	$prototype: false;

	// Colours
	$color-primary: #C61924 !default; // Red
	$color-secondary: #aa3311 !default; // Olive
	$color-tertiary: #B10DC9 !default; // Purple
	$color-success: #2ECC40 !default;
	$color-warning: #ff9900 !default;
	$color-danger: #FF4136 !default;

	// Shades
	$shade-dark: #150F11 !default;
	$shade-medium-dark: #333 !default;
	$shade-medium: #777 !default;
	$shade-medium-lite: #BBB !default;
	$shade-lite: #EEE !default;

	// Body
	$body-bg: $shade-lite !default;
	$body-padding: true !default;

	// Paragraphs (and all non-heading text)
	$p-font: Josefin Sans, San Francisco, Helvetica, Arial, Verdana, sans-serif !default;
	$p-font-size: text(16, 20) !default;
	$p-font-weight: normal !default;
	$p-font-style: normal !default;
	$p-font-color: inherit !default;
	$p-line-height: 1.3 !default;
	$p-margin-bottom: 1rem !default;

	// Headings (h1; others based on this)
	$h1-font: $p-font;
	$h1-font-size: text(30, 54) !default;
	$h1-font-weight: bold !default;
	$h1-font-style: normal !default;
	$h1-font-color: $p-font-color !default;
	$h1-line-height: $p-line-height !default;
	$h1-margin-bottom: $p-margin-bottom !default;

	$h2-font: $h1-font !default;
	$h2-font-size: text(25, 33) !default;
	$h2-font-weight: $h1-font-weight !default;
	$h2-font-style: $h1-font-style !default;
	$h2-font-color: $h1-font-color !default;
	$h2-line-height: $h1-line-height !default;
	$h2-margin-bottom: $h1-margin-bottom !default;

	$h3-font: $h1-font !default;
	$h3-font-size: text(21, 26) !default;
	$h3-font-weight: $h1-font-weight !default;
	$h3-font-style: $h1-font-style !default;
	$h3-font-color: $h1-font-color !default;
	$h3-line-height: $h1-line-height !default;
	$h3-margin-bottom: $h1-margin-bottom !default;

	$h4-font: $h1-font !default;
	$h4-font-size: text(14, 18) !default;
	$h4-font-weight: $h1-font-weight !default;
	$h4-font-style: $h1-font-style !default;
	$h4-font-color: $h1-font-color !default;
	$h4-line-height: $h1-line-height !default;
	$h4-margin-bottom: $h1-margin-bottom !default;

	$h5-font: $h1-font !default;
	$h5-font-size: text(13, 16) !default;
	$h5-font-weight: $h1-font-weight !default;
	$h5-font-style: $h1-font-style !default;
	$h5-font-color: $h1-font-color !default;
	$h5-line-height: $h1-line-height !default;
	$h5-margin-bottom: $h1-margin-bottom !default;

	$h6-font: $h1-font !default;
	$h6-font-size: text(11, 14) !default;
	$h6-font-weight: $h1-font-weight !default;
	$h6-font-style: $h1-font-style !default;
	$h6-font-color: $h1-font-color !default;
	$h6-line-height: $h1-line-height !default;
	$h6-margin-bottom: $h1-margin-bottom !default;

	// Layout & Grid
	$layout-width: 1400px !default;
	$breakpoints: (
		sm: 0,
		md: 700px,
		lg: 1100px,
	) !default;
	$grid-column-count: 12 !default;
	$grid-gutters: (
		sm: 0.5rem,
		md: 1rem,
		lg: 1.5rem
	) !default;
	$grid-gutters-default: map-get($grid-gutters, lg) !default;
	$vertical-spacing: (
		sm: 2rem,
		md: 3rem,
		lg: 4rem
	) !default;
	$vertical-spacing-default: map-get($grid-gutters, md) !default;

	// Links
	$link-color: $color-primary !default;

	// Buttons
	$button-bg-color: $color-primary !default;
	$button-shade-shift: lighten !default;
	$button-type: solid !default;
	$button-border-radius: 3px !default;
	$button-padding: 15px 25px !default;
	$button-font-weight: bold !default;
	$button-text-transform: uppercase !default;

	// Billboards
	$billboard-height: 400 500 600 !default;
	$billboard-content-width: 100% !default;
	$billboard-valign: middle !default;
	$billboard-halign: center !default;
	$billboard-text-color: $shade-lite !default;
	$billboard-background-color: rgba(0,0,0,0.4) !default;

	// Popups
	$popup: (
		open-class:'open',
		bg-class:'bg',
		body-class:'popup-open',
		wrap-class:'wrap',
		container-class:'container',
		close-class:'close',
		content-class:'content'
	) !default;

//**************************************************************
// Function_Name
//**************************************************************
	// Function_description
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@function funcName($input) {}

//**************************************************************
// Explode String
//**************************************************************
	// Explodes a SASS string using any arbitrary delimiter
	//
	// @param {String} $string - The input string
	// 
	// @return {String} $delimiter - The delimiter for 
	// exploding the string
	//**********************************************************
	@function explode($string, $delimiter) {
		$result: ();
		@if $delimiter == "" {
			@for $i from 1 through str-length($string) {
				$result: append($result, str-slice($string, $i, $i));
			}
			@return $result;
		}
		$exploding: true;
		@while $exploding {
			$d-index: str-index($string, $delimiter);
			@if $d-index {
				@if $d-index > 1 {
					$result: append($result, str-slice($string, 1, $d-index - 1));
					$string: str-slice($string, $d-index + str-length($delimiter));
				} @else if $d-index == 1 {
					$string: str-slice($string, 1, $d-index + str-length($delimiter));
				} @else {
					$result: append($result, $string);
					$exploding: false;
				}
			} @else {
				$result: append($result, $string);
				$exploding: false;
			}
		}
		@return $result;
	}

//**************************************************************
// Column Calculator
//**************************************************************
	// Function_description
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@function col-calc($input) {
		@if ($input <= $grid-column-count) {
			@return percentage( $input / $grid-column-count );
		} @else {
			@warn "Grid count too high";
			@return false;
		}
	}

//**************************************************************
// Strip Unit by Hugo Giraudel
//**************************************************************
	// Remove the unit of a length
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@function strip-unit($number) {
		@if type-of($number) == 'number' and not unitless($number) {
			@return $number / ($number * 0 + 1);
		}
		@return $number;
	}

//**************************************************************
// Add Unit
//**************************************************************
	// Adds a 'px' or 'rem' value to a unitless number, based 
	// on value.
	//
	// @param {Number} $number - Number to add unit to
	//**********************************************************
	@function add-unit($number) {
		@if ( type_of( $number ) == Number ) {
			$number: strip-unit($number);
			@if $number >= 10 {
				@return $number * 1px;
			}
			@return $number * 1rem;
		} @else {
			@return $number;
		}
	}

//**************************************************************
// Contrast Checker
//**************************************************************
	// Return a color that maximises contrast
	//
	// @param {String} $bg - The background color to check 
	// against
	// 
	// @param {String} $dark - The DARK colour to return
	// 
	// @param {Boolean} $lite - The LIGHT colour to return
	//**********************************************************
	@function contrast($bg, $dark:$shade-dark, $lite:$shade-lite) {
		@if (lightness($bg) > 50) {
			@return $dark;
		} @else {
			@return $lite;
		}
	}

//**************************************************************
// Get Next Item in SASS Map (Simon Koch)
//**************************************************************
	// returns next map item or fallback value if map, key 
	// or previous item does not exist
	//
	// @param {Map} $map - Sass list map
	// 
	// @param {String} $key - List map key
	// 
	// @param {Boolean} $fallback (false) - Fallback value if 
	// map, key or previous item does not exist
	// 
	// @param {String} $return (value) - Return value or key of 
	// previous list item
	//**********************************************************
	@function map-get-next($map, $key, $fallback: false, $return: value) {
		@if type-of($map) == map {
		    @if map-has-key($map, $key) {
		        $i: 0;
		        $key-index: false;
		        @each $map-key, $map-value in $map {
		            $i: $i + 1;
		            @if $map-key == $key {
		                $key-index: $i;
		            }
		            @if $i == $key-index + 1 {
		                @if $return == key {
		                    @return $map-key;
		                } @else {
		                    @return $map-value;
		                }
		            }
		            @if $i == length($map) {
		                @return $fallback;
		            }
		        }
		        @return $fallback;
		    }
		    @warn 'No valid key #{$key} in map';
		    @return $fallback;
		}
		@warn 'No valid map';
		@return $fallback;
	}

//**************************************************************
// Get Previous Item in SASS Map (Simon Koch)
//**************************************************************
	// returns previous map item or fallback value if map, key 
	// or previous item does not exist
	//
	// @param {Map} $map - Sass list map
	// 
	// @param {String} $key - List map key
	// 
	// @param {Boolean} $fallback (false) - Fallback value if 
	// map, key or previous item does not exist
	// 
	// @param {String} $return (value) - Return value or key of 
	// previous list item
	//**********************************************************
	@function map-get-prev($map, $key, $fallback: false, $return: value) {
	    @if type-of($map) == map {
	        @if map-has-key($map, $key) {
	            $i: 1;
	            $key-index: false;
	            $previous-index: false;
	            @each $map-key, $map-value in $map {
	                @if $map-key == $key {
	                    $key-index: $i;
	                }
	                $i: $i + 1;
	            }
	            @if $key-index != false {
	                $previous-index: $key-index - 1;
	                $i: 1;
	                @if $previous-index < 1 {
	                    @return $fallback;
	                }
	                @else {
	                    @each $map-key, $map-value in $map {
	                         @if $i == $previous-index {
	                            @if $return == 'key' {
	                                @return $map-key;
	                            }
	                            @else {
	                                @return $map-value;
	                            }
	                        }
	                        $i: $i + 1;
	                    }
	                }
	            }
	            @else {
	                @return $fallback;
	            }
	        }
	        @else {
	            // @warn 'No valid key #{$key} in map';
	            @return $fallback;
	        }
	    }
	    @else {
	        // @warn 'No valid map';
	        @return $fallback;
	    }
	}

//******************************************************************
// Browser Hacks
//******************************************************************
	// Allows targeted "hacks" for a single browser
	//
	// @param {Keyword} $browser - The name of the browser you want
	// to hack
	//**************************************************************
	@mixin hack ( $browser ) {
		$browser: to-lower-case($browser);
		@if ($browser == ie or edge) {
			@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
				@content;
			}
		} @else if ($browser == safari) {
			$mh: '\\0 screen';
			@media #{$mh} {
				@content;
			}
		} @else if ($browser == firefox or ff) {
			@supports (-moz-appearance:meterbar) and (background-blend-mode:difference,normal) {
				@content;
			}
		} @else if ($browser == chrome) {
			@media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm) {
				@content;
			}
		} @else {
			@warn 'No supported browser given';
		}
	}

//******************************************************************
// Breakpoint Calculator
//******************************************************************
	// Define your breakpoints in the _variables file, then just
	// use keywords with this mixin to wrap CSS rules in the needed
	// media queries without worrying about the specifics. 
	//
	// @param {Keyword} $size - one of the keys from the 
	// $breakpoints map in _variables
	// 
	// @param {Keyword} $direction - One of "up", "down", or "only"
	//**************************************************************
	@mixin bp ( $size, $direction:up ) {
		@if ($direction == down) {
			@if (map-get-next($breakpoints,$size)) {
				@media (max-width: #{ map-get-next($breakpoints,$size) - 1px } ) {
					@content;
				}
			} @else {
				@content;
			}
		} @else if ($direction == up) {
			@if (map-get-prev($breakpoints,$size)) {
				@media (min-width: #{map-get($breakpoints,$size)}) {
					@content;
				}
			} @else {
				@content;
			}
		} @else if ($direction == only) {
			@if ( map-get-prev($breakpoints,$size) and map-get-next($breakpoints,$size) ) {
				@media ( min-width: #{map-get( $breakpoints, $size )} ) and (max-width: #{map-get-next($breakpoints,$size) - 1px}) {
					@content;
				}
			} @else if ( map-get-prev($breakpoints,$size) ) {
				@media ( min-width: #{map-get( $breakpoints, $size )} ) {
					@content;
				}
			} @else if ( map-get-next($breakpoints,$size) ) {
				@media (max-width: #{map-get-next($breakpoints,$size) - 1px}) {
					@content;
				}
			} @else {
				@content;
			}
		} @else {
			@warn 'invalid direction given';
		}
	}

//*******************************************
// Embedded (iframe) Videos
//*******************************************
	@mixin responsive-iframe($type) {
		position: relative;
		@if ($type == wide) {
			padding-bottom: 56.25%; /* 16:9 */
		}
		@if ($type == full) {
			padding-bottom: 75%; /* 4:3 */
		}
		height: 0;
		iframe {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}
	}

//***************************************************************
// Billboard & Billboard Slide
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Keyword} $valign - Takes keyword for vertical alignment. Accepts 'top', 'middle', and 'bottom'.
	// @param {Keyword} $halign - Takes keyword for horizontal alignment. Accepts 'left', 'center', and 'right'.
	// @param {Number(s)} $content-width - Any single numerical value or list of numerical values. You can use column counts, percentages (with or without a unit), or any arbitrary value. A list of values will be applied to subsequent breakpoints in order from smallest to biggest.
	// @param {Number(s)} $height - Any single numerical value or list of numerical values. You can use pixel heights (with or without a unit), or any arbitrary value WITH a unit. A list of values will be applied to subsequent breakpoints in order from smallest to biggest.
	// @param {String} $text-color - Any valid CSS value for 'color'. 
	// @param {String} $header-color - Any valid CSS value for 'color'.
	//**********************************************************
	@mixin billboard($height:$billboard-height) {
		@include row;
		position: relative;
		overflow: hidden;
		@if ( type_of($height) == list ) {
			@each $bp, $value in $breakpoints {
				@include bp( $bp ) {
					$relative-height: nth( $height, index( ( $breakpoints ), ( $bp $value ) ) );
					@if ( type_of( $relative-height ) == number and unitless( $relative-height ) ) {
						min-height: $relative-height * 1px;
					} @else {
						min-height: $relative-height;
					}
				}
			}
		} @else {
			height: 0;
			padding-bottom: $height;
		}
	}
	@mixin slide(
		$valign:$billboard-valign, 
		$halign:$billboard-halign, 
		$content-width:$billboard-content-width, 
		$text-color:$billboard-text-color,
		$bg-color:$billboard-background-color
	) {
		background-size: cover;
		background-position: center;
		@include column;
		display: flex;
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		color: $text-color;
		flex-direction: column;
		@include gutters($h:true);
		@if ($valign == top) {
			justify-content: flex-start;
		} @else if ($valign == bottom) {
			justify-content: flex-end;	
		} @else if ($valign == middle or center or centre) {
			justify-content: center;
		} @else {
			@warn '#{$valign} is an invalid vertical alignment, please use top, middle, or bottom';
		}
		@if ($halign == left) {
			align-items: flex-start;
			text-align: left;
		} @else if ($halign == right) {
			align-items: flex-end;
			text-align: right;	
		} @else if ($halign == middle or center or centre) {
			align-items: center;
			text-align: center;
		} @else {
			@warn '#{$halign} is an invalid horizontal alignment, please use left, center, or right';
		}
		transition: transform 0.6s linear;
		transform: translateX(-100%);
		&.active {
			transform: translateX(0%);
		}
		&.active ~ & {
			transform: translateX(100%);
		}
		&:only-child {
			transform: translateX(0%);
		}
		> * {
			position: relative;
			z-index: 2;
			margin-bottom: $p-margin-bottom;
			// Set max-width
			@if (type_of($content-width) == list) {
				@each $bp, $value in $breakpoints {
					@include bp($bp) {
						$relative-width: nth( $content-width, index( ($breakpoints), ($bp $value) ) );
						@if (type_of($relative-width) == number) {
							@if ($relative-width <= $grid-column-count) {
								max-width: col-calc($relative-width);
							} @else if ( unit( $relative-width ) == '%' ) {
								max-width: $relative-width;
							} @else {
								max-width: percentage($relative-width / 100);
							}
						} @else {
							max-width: $relative-width;
						}
					}
				}
			} @else {
				max-width: $content-width;
			}
		}
		// Headings
		h1, h2, h3, h4, h5, h6 {
			color: inherit;
		}
		// Background Layer
		&:before {
			content: '';
			background: $bg-color;
			position: absolute;
			top:0;
			left:0;
			right:0;
			bottom:0;
		}
		@media (hover:hover) {
			
		}
	}

//*******************************************
// Popups
//*******************************************
	// TODO: Make the close button customizable
	//***************************************
	@mixin popup(
		$open-class:map-get($popup,open-class),
		$bg-class:map-get($popup,bg-class),
		$body-class:map-get($popup,body-class),
		$wrap-class:map-get($popup,wrap-class),
		$container-class:map-get($popup,container-class),
		$close-class:map-get($popup,close-class),
		$content-class:map-get($popup,content-class)
	) {
		&-#{$open-class} {
			overflow: hidden;
		}
		&-#{$bg-class} {
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba($shade-dark,0.5);
			overflow: hidden;
			pointer-events: none;
			// Paint-friendly transforms
			opacity: 0;
			transform: scaleY(0);
			transition: all 0.25s ease;
			.#{$body-class} & {
				pointer-events: auto;
				opacity: 1;
				transform: scaleY(1);
				z-index: 10;
			}
		}
		&-#{$wrap-class} {
			background: $shade-lite;
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%,-50%);
			max-width: 80vw;
			max-height: 75vh;
		}
		&-#{$container-class} {
			padding: 30px;
			overflow: auto;
			max-width: 80vw;
			max-height: 75vh;
		}
		&-#{$close-class} {
			position: absolute;
			top: 0;
			right: 0;
			display: block;
			width: 30px; 
			height: 30px;
			transform: translate(40%, -40%);
			background: $color-danger;
			cursor: pointer;
			text-align: center;
			line-height: 23px;
			color: white;
			border: 3px solid $shade-lite;
			border-radius: 50%;
			font-size: 30px;
			transition: transform 0.3s ease;
			z-index: 10;
			&:before {
				content: '\00d7';
				position: relative;
				top: -2px;
			}
			&:hover {
				transform: translate(40%, -40%) rotate(90deg);
				&:before {
					left: 0px;
					top: -1px;
				}
			}
		}
		&-#{$content-class} {
			display: none;
		}
	}

//**************************************************************
// Button Maker
//**************************************************************
	// Makes Buttons
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin button( $bg-color:$button-bg-color, $color:auto, $shade-shift:lighten, $shift-color:auto, $type:solid, $size:normal ) {
		display: inline-flex;
		align-items: center;
		border: 2px solid $bg-color;
		@if ( $type == hollow ) {
			background-image: linear-gradient(130deg, rgba(0,0,0,0) 50%, rgba(0,0,0,0.25) 50%);
		} @else if ( $shade-shift == lighten ) {
			background-image: linear-gradient(130deg, $bg-color 50%, lighten($bg-color, 20%) 50%);
		} @else if ( $shade-shift == darken ) {
			background-image: linear-gradient(130deg, $bg-color 50%, darken($bg-color, 20%) 50%);
		} @else {
			background-image: linear-gradient(130deg, $bg-color 50%, $shade-shift 50%);
		}
		border-radius: 3px;
		@if ( $size == normal ) {
			padding: 15px 25px;
			font-size: inherit;
		} @else if ( $size == small ) {
			padding: 5px 10px;
			font-size: 90%;
		} @else {
			
		}
		font-weight: bold;
		text-decoration: none;
		text-transform: uppercase;
		@if ( $type == hollow ) {
			color: $bg-color;
		} @else if ( $color == auto ) {
			color: contrast($bg-color);
		} @else {
			color: $color;
		}
		background-size: 250%;
		background-position: 0% center;
		cursor: pointer;
		transition: all 0.5s ease;
		&:hover,
		&:active {
			background-position: 100% center;
			@if ( $type != hollow ) {
				@if ( $shift-color == auto and $shade-shift == lighten ) {
					color: contrast(lighten($bg-color, 20%));
				} @else if ( $shift-color == auto and $shade-shift == darken ) {
					color: contrast(darken($bg-color, 20%));
				} @else if ( $shift-color == auto and $shade-shift != lighten or darken ) {
					color: contrast($shade-shift);
				} @else {
					color: $shift-color;
				}
			}
		}
	}

//**************************************************************
// Alert Maker
//**************************************************************
	// Makes Alert Boxes
	//
	// @param {Number} $number - Number to remove unit from
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin alert( $bg:$color-primary, $link:false, $text:auto, $contained:true ) {
		display: block;
		max-width: 100%;
		background: $bg;
	    padding-top: 4px;
	    // cursor: pointer;
	    font-weight: 500;
		font-size: 80%;
		line-height: 4;
		transition: letter-spacing 0.5s ease;
		line-height: 1.3;

		@if ($contained == true) {
		    padding: 15px;
		    border-radius: 5px;
		    border: 1px solid $bg;
		    margin: 10px 0;
		} @else {
			padding: 20px 0;
		}

		@if ($text == auto) {
	    	color: contrast($bg);
	    } @else {
	    	color: $text;
	    }

		@if ($link == true) {
			text-decoration: none;
			&:hover {
				text-decoration: none;
			}
		}
	    * {
	    	color: inherit;
			font-weight: inherit;
			letter-spacing: inherit;
			font-size: inherit;
			line-height: inherit;
			cursor: inherit;
			margin-bottom: 0;
	    }
	}

//**************************************************************
// Row Maker
//**************************************************************
	// Outputs containers for grid-constrained content, here
	// defined as "rows" for ease of conception.
	//
	// @param {Boolean} $constrain - Keep within $layout-width
	// 
	// @param {Keyword} $orientation - Determines the flow of 
	// child elements, "vertical" or "horizontal" are accepted.
	// 
	// @param {Boolean} $wrap - Allows or disallows wrapping of
	// child elements
	//**********************************************************
	@mixin row($constrain:true, $orientation:horizontal, $wrap:true, $h-gutter:false) {
		// display: flex;
		display: grid;
		grid-template-columns: repeat($grid-column-count,1fr);
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				@if ( map-get( $grid-gutters, $bp ) ) {
					grid-column-gap: map-get( $grid-gutters, $bp );
					@if ($h-gutter == true) {
						grid-row-gap: map-get( $grid-gutters, $bp );
					}
				}
			}
		}
		width: 100%;
		@if ($constrain == true) {
			max-width: $layout-width;
			margin-left: auto;
			margin-right: auto;
		}
		@if ($orientation == vertical) {
			flex-direction: column;
		}
		@if ($wrap == true) {
			flex-wrap: wrap;
		}
	}

//***************************************************************
// Column Maker
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Arglist} $cols - takes a Keyword followed by a 
	// Numbereach pair should be separated by a comma. The
	// Keyword should be one of the keys in $breakpoints and 
	// the Number should be a value not greater than 
	// $grid-column-count. FOR EXAMPLE, you might put:
	// "sm 12, md 6, lg 3". 
	//**********************************************************
	@mixin column($cols...) {
		// display: block;
		@if ( length( $cols ) > 0 ) {
			@each $col in $cols {
				@if ( length( $col ) == 2 ) {
					$size: nth( $col, 1 );
					$columns: nth( $col, 2 );

					@if ( map-get( $breakpoints, $size ) ) {
						@include bp( $size ) {
							grid-column-end: span $columns;
						}
					} @else {
						// @warn 'breakpoint does not exist';
					}
				} @else {
					// @warn 'incorrect numbers of args passed (`#{$col}`)';
				}
			}
		} @else {
			grid-column-end: span $grid-column-count;
		}
	}

//***************************************************************
// Column Shifter
//***************************************************************
	// Outputs grid-constrained containers, here
	// defined as "columns" for ease of conception.
	//
	// @param {Arglist} $cols - takes a Keyword followed by a 
	// Numbereach pair should be separated by a comma. The
	// Keyword should be one of the keys in $breakpoints and 
	// the Number should be a value not greater than 
	// $grid-column-count. FOR EXAMPLE, you might put:
	// "sm 12, md 6, lg 3". 
	//**********************************************************
	@mixin shift($cols...) {
		// display: block;
		@if ( length( $cols ) > 0 ) {
			@each $col in $cols {
				@if ( length( $col ) == 2 ) {
					$size: nth( $col, 1 );
					$columns: nth( $col, 2 ) + 1;

					@if ( map-get( $breakpoints, $size ) ) {
						@include bp( $size ) {
							grid-column-start: $columns;
						}
					} @else {
						// @warn 'breakpoint does not exist';
					}
				} @else {
					// @warn 'incorrect numbers of args passed (`#{$col}`)';
				}
			}
		}
	}
	
//**************************************************************
// Include Responsive Gutters
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin gutters($type:padding, $h:false, $v:true) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				--bp: #{$bp};
				@if ( map-get( $grid-gutters, $bp ) ) {
					@if ($type == padding) {
						@if ($v == true) {
							padding-left: map-get( $grid-gutters, $bp );
							padding-right: map-get( $grid-gutters, $bp );
						}
						@if ($h == true) {
							padding-top: map-get( $grid-gutters, $bp );
							padding-bottom: map-get( $grid-gutters, $bp );
						}
					} @else if ($type == margin) {
						@if ($v == true) {
							margin-left: map-get( $grid-gutters, $bp );
							margin-right: map-get( $grid-gutters, $bp );
						}
						@if ($h == true) {
							margin-top: map-get( $grid-gutters, $bp );
							margin-bottom: map-get( $grid-gutters, $bp );
						}
					}
				} @else {
					@warn 'no bp??';
				}
			}
		}
	}

//**************************************************************
// Include Responsive Spacer Margins
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin spacer($location:both, $type:margin) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				@if ( map-get( $vertical-spacing, $bp ) ) {
					@if ($location == both) {
						@if ($type == margin) {
							margin-top: map-get( $vertical-spacing, $bp );
							margin-bottom: map-get( $vertical-spacing, $bp );
						} @else if ($type == padding) {
							padding-top: map-get( $vertical-spacing, $bp );
							padding-bottom: map-get( $vertical-spacing, $bp );
						}
					} @else if ($location == top) {
						@if ($type == margin) {
							margin-top: map-get( $vertical-spacing, $bp );
						} @else if ($type == padding) {
							padding-top: map-get( $vertical-spacing, $bp );
						}
					} @else if ($location == bottom) {
						@if ($type == margin) {
							margin-bottom: map-get( $vertical-spacing, $bp );
						} @else if ($type == padding) {
							padding-bottom: map-get( $vertical-spacing, $bp );
						}
					} @else {
						@warn 'invalid location passed to spacer';
					}
				}
			}
		}
	}

//**************************************************************
// Make Full-Width
//**************************************************************
	// Returns Responsive Gutters on items that are not columns
	//
	// @param {Number} $number - Number to remove unit from
	// 
	// @return {Number} - Unitless number
	//**********************************************************
	@mixin full-width($grid-contrained:true) {
		@each $bp, $value in $breakpoints {
			@include bp( $bp ) {
				@if ( map-get( $grid-gutters, $bp ) ) {
					margin-left: map-get( $grid-gutters, $bp ) * -1;
					@if ($grid-contrained == true) {
						width: calc(100% + #{map-get( $grid-gutters, $bp ) * 2});
					} @else {
						width: 100%;
					}
					max-width: 100vw;
				}
			}
		}
	}

//*******************************************
// CSS RESET
//*******************************************
	// Based on the Meyer reset
	//*******************************************/
	@if ( $reset == true ) {
		* {
			box-sizing: border-box;
		}
		html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
			margin: 0;
			padding: 0;
			border: 0;
			font-size: inherit;
			font-family: inherit;
			vertical-align: baseline;
		}
		html {
			height: 100%;
		}
		body {
			min-height: 100%;
		}
		// HTML5 display-role reset for older browsers
		article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
			display: block;
		}
		// Move this out to the settings file?
		ol, ul {
			list-style: none;
		}
		// Move this out to the settings file?
		blockquote, q {
			quotes: none;
			&:before,
			&:after {
				content: '';
				content: none;
			}
		}
		table {
			border-collapse: collapse;
			border-spacing: 0;
		}
	}

//*******************************************
// TYPOGRAPHY
//*******************************************
	html {
		font-size: add-unit($p-font-size);
	}
	body {
		background-color: $body-bg;
		font-family: $p-font;
		font-size: 100%;
		font-weight: $p-font-weight;
		font-style: $p-font-style;
		color: $p-font-color;
		line-height: $p-line-height;
		@include gutters;
	}
	blockquote {
		border-left: 5px solid $shade-dark;
		padding: 5px 0px 5px 10px;
		margin-bottom: $p-margin-bottom;
	}
	p {
		margin-bottom: $p-margin-bottom;
	}
	h1 {
		font-family: $h1-font;
		font-size: add-unit($h1-font-size);
		font-weight: $h1-font-weight;
		font-style: $h1-font-style;
		color: $h1-font-color;
		line-height: $h1-line-height;
		margin-bottom: $h1-margin-bottom;
	}
	h2 {
		font-family: $h2-font;
		font-size: add-unit($h2-font-size);
		font-weight: $h2-font-weight;
		font-style: $h2-font-style;
		color: $h2-font-color;
		line-height: $h2-line-height;
		margin-bottom: $h2-margin-bottom;
	}
	h3 {
		font-family: $h3-font;
		font-size: add-unit($h3-font-size);
		font-weight: $h3-font-weight;
		font-style: $h3-font-style;
		color: $h3-font-color;
		line-height: $h3-line-height;
		margin-bottom: $h3-margin-bottom;
	}
	h4 {
		font-family: $h4-font;
		font-size: add-unit($h4-font-size);
		font-weight: $h4-font-weight;
		font-style: $h4-font-style;
		color: $h4-font-color;
		line-height: $h4-line-height;
		margin-bottom: $h4-margin-bottom;
	}
	h5 {
		font-family: $h5-font;
		font-size: add-unit($h5-font-size);
		font-weight: $h5-font-weight;
		font-style: $h5-font-style;
		color: $h5-font-color;
		line-height: $h5-line-height;
		margin-bottom: $h5-margin-bottom;
	}
	h6 {
		font-family: $h6-font;
		font-size: add-unit($h6-font-size);
		font-weight: $h6-font-weight;
		font-style: $h6-font-style;
		color: $h6-font-color;
		line-height: $h6-line-height;
		margin-bottom: $h6-margin-bottom;
	}

//*******************************************
// IMAGES 
//*******************************************
	img {
		max-width: 100%;
	}

//*******************************************
// LINKS
//*******************************************
	a {
		color: $link-color;
		text-decoration: none;
		p &:hover,
		p &:focus,
		p &:active {
			text-decoration: underline;
		}
	}

//*******************************************
// LISTS
//*******************************************
	ul, ol {

	}
	li {

	}

//*******************************************
// BUTTONS
//*******************************************
	.button {
		@include button;
	}

//*******************************************
// BILLBOARDS
//*******************************************
	@if ($prototype == true) {
		.billboard {
			@include billboard;
			&-slide {
				@include slide;
				&.top {
					justify-content: flex-start; 
				}
				&.middle {
					justify-content: center;
				}
				&.bottom {
					justify-content: flex-end;
				}
				&.left {
					align-items: flex-start;
					text-align: left;
				}
				&.center {
					align-items: flex-end;
					text-align: right;
				}
				&.right {
					align-items: flex-end;
					text-align: right;
				}
			}
		}
	}

//*******************************************
// POPUPS (Convert to mixin)
//*******************************************
	.popup {
		@include popup();
	}

//*******************************************
// Embedded (iframe) Videos
//*******************************************
	@if ($prototype == true) {
		.responsive-widescreen {
			@include responsive-iframe(wide);
		}
		.responsive-fullscreen {
			@include responsive-iframe(full);
		}
	}

//*******************************************
// FORMS (convert to mixin)
//*******************************************
	.form-field {
		position: relative;
		margin-bottom: 25px;
	}
	.help-trigger {
		position: absolute;
		top: 0;
		right: 0;
		display: block;
		width: 25px;
		height: 25px;
		border: 2px solid $color-warning;
		border-radius: 50%;
		text-align: center;
		line-height: 20px;
		font-size: 90%;
		color: $color-warning;
		cursor: pointer;
		&:hover,
		&.open {
			background-color: $shade-medium-dark;
		}
	}
	label {
		display: block;
		margin-bottom: 5px;
	}	
	[type='text'], 
	[type='password'], 
	[type='date'], 
	[type='datetime'], 
	[type='datetime-local'], 
	[type='month'], 
	[type='week'], 
	[type='email'], 
	[type='number'], 
	[type='search'], 
	[type='tel'],
	[type='time'], 
	[type='url'], 
	[type='color'], 
	textarea {
	    display: block;
	    margin: 0 0 1.25rem;
	    padding: 0.7rem;
	    border: 1px solid $shade-medium;
	    border-radius: 5px;
	    background-color: #fefefe;
	    box-shadow: inset 0 1px 2px rgba($color-primary,0.1);
	    font-family: inherit;
	    font-size: inherit;
	    font-weight: normal;
	    color: #0a0a0a;
	    transition: box-shadow 0.5s,border-color 0.25s ease-in-out;
	    appearance: none;
	    &:focus {
	    	outline: none;
		    border: 1px solid $color-primary;
		    background-color: #fefefe;
		    box-shadow: 0 0 5px $color-primary;
		    transition: box-shadow 0.5s ease-in-out, border-color 0.25s ease-in-out;
	    }
	}
	[type='color'] {
		width: 2.4375rem;
		height: 2.4375rem;
		padding: 0.1rem 0.2rem;
	}
	[type='file'] {
		width: 0.1px;
		height: 0.1px;
		opacity: 0;
		overflow: hidden;
		position: absolute;
		z-index: -1;
		+ .file-placeholder {
			@include button($size:small);

		}
		&:focus + .file-placeholder ,
		& + .file-placeholder:hover {
		    // background-color: red;
		}
	}
	button,
	[type='submit'] {
		@include button;
	}


// -----------------------------------------------------------------------------------------------------------


// Generic Stuff
	html, body {
		color: inherit;
	}
	.alt-text {
		font-family: Crimson Text;
	}
	em {
		text-decoration: underline;
		font-weight: 700;
	}
	section {
		@include row;
		@include spacer;
		outline: none;
	}
	.text-section {
		@include column(sm 12, md 10, lg 8);
		@include shift(md 1, lg 2);
	}
	.call-out {
		@include row;
		@include full-width();
		border-top: 4px solid $color-primary;
		border-bottom: 4px solid $color-primary;
		outline: none;
		background: $shade-dark;
		color: $shade-lite;
		.column {
			@include bp(sm) {
				padding: .5rem 0;
			}
			@include bp(md) {
				padding: 1rem 0;
			}
			@include bp(lg) {
				padding: 1.5rem 0;
			}
			@include column(sm 12);
			text-align: center;
		}
		h1, h2, h3, h4, h5, h6, p {
			&:last-child {
				margin-bottom: 0;
			}
		}
		&.truck {
			background-image: linear-gradient(to top, rgba($shade-dark,0.75), rgba($shade-dark,0.75)),url(rv-hauling-red-chevy.jpg);
		    background-size: cover;
		    background-position: 50% 60%;
		}
		&.rates {
			background-image: linear-gradient(to top, rgba($shade-dark,0.75), rgba($shade-dark,0.75)),url(calgary-alberta.jpg);
		    background-size: cover;
		    background-position: 50% 45%;
		}
		&.feature {
			.column {
				padding: 0;
				position: relative;
			}
			.gradient {
				background-color: $shade-dark;
			    background-image: linear-gradient(45deg, rgba($color-primary,.25), rgba($shade-medium-dark,0.5), rgba($color-primary,.25));
			    background-size: 100%;
			    background-clip: text;
			    color: rgba(0,0,0,0);
				text-align: justify;
				margin-bottom: 0;
				line-height: 1;
    			padding: 1rem;
			}
			.alt-text {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%,-50%);
			}
		}
		&.alberta {
			background-image: linear-gradient(to top, rgba($shade-dark,0.75), rgba($shade-dark,0.75)),url(alberta-flag.jpg);
		    background-size: contain;
		    background-position: center;
		}
	}

//**************************
// Animate-in
//**************************
.animate-in[data-st] {
	opacity: 0;
	transform: scale(0);
	transition: opacity 0.33s ease, transform 0.33s ease;
	&.on-screen {
		opacity: 1;
		transform: scale(1);
	}
}

.header {
	@include row($wrap:false);
	@include full-width();
	z-index: 3;
	padding: 0 $grid-gutters-default;
	display: flex;
	align-items: center;
	position: fixed;
	top: 0;
	background-color: rgba($shade-dark, 0);
    backdrop-filter: blur(0px);
    text-shadow: -1px 1px 2px rgba($shade-dark, 0.5);
	transition: background-color 0.5s ease, backdrop-filter 0.5s ease, text-shadow 0.5s ease;
	&.standalone {
		background-color: rgba($shade-dark, 1);
    	backdrop-filter: blur(5px);
    	text-shadow: -1px 1px 2px rgba($shade-lite, 0);
    }
	&-logo {
		font-size: $h3-font-size;
		font-weight: bold;
		position: relative;
		top: -40px;
		transition: top 0.5s ease;
		.standalone & {
			top: 0;
		}
	}
	&-nav-wrapper {
		flex-grow: 1;
		position: relative;
	}
	&-nav {
		display: flex;
		justify-content: flex-end;
		flex-wrap: wrap;
		.mobile & {
			flex-direction: column;
			position: absolute;
			top: 100%;
			right: -7.5px;
			background: transparent;
			backdrop-filter: blur(0px);
			align-items: flex-end;
			transform-origin: top;
			transform: scale(1, 0);
			transition: transform 0.5s ease, background 0.5s ease, backdrop-filter 0.5s ease;
			.standalone & {
				background-color: rgba($shade-lite, 0.9);
    			backdrop-filter: blur(5px);
			}
			&.open {
				transform: scale(1, 1);
			}
		}
		a {
			display: inline-block;
			color: $shade-lite;
			font-size: 120%;
			text-decoration: none;
			padding: 15px 7.5px;
			font-size: 80%;
			text-transform: uppercase;
			transition: color 0.5s ease, padding 0.5s ease;
			.standalone & {
				color: $color-primary;
			}
			.mobile & {
				padding: 7.5px 7.5px;
				.standalone & {
					padding: 7.5px 15px;
				}
			}
		}
		&-trigger {
			display: none;
			.mobile & {
				display: flex;
				justify-content: flex-end;
				padding: 15px 7.5px;
				color: $shade-lite;
				transition: color 0.5s ease;
				cursor: pointer;
				.standalone & {
					color: $color-primary;
				}
			}
		}
	}
}

.billboard {
	@include billboard(60vh);
	@include full-width;
	background-color: $shade-medium-lite;
	&-slide {
		@include slide;
	}
	.main-title {
		font-size: text(35,100);
		font-weight: bold;
		position: absolute;
		top: 50%;
		left: 50%;
		margin-bottom: 0;
		line-height: 0.7;
		text-shadow: -2px 2px 3px rgba($shade-dark,0.5);
		transform: translate(-50%,-50%);
		color: $shade-lite;
		line-height: .85;
		text-align: center;
		white-space: nowrap;
	}
}

.contact-card {
	position: relative;
	z-index: 1;
	margin: -2rem auto 0;
	display: inline-block;
	padding: 1.25rem 3rem;
	border-radius: 1rem;
	background-color: $shade-lite;
	@include column(sm 10, md 6, lg 4);
	@include shift(sm 1, md 3, lg 4);
	&-wrapper {
		@include row;
	}
	small {
		text-align: center;
		font-family: $h1-font;
		display: block;
	}
	large {
		font-size: 200%;
		text-align: center;
		font-family: $h1-font;
		display: block;
	}
}

section.about {
	@include full-width();
	img[src*="gary-dober"] {
		@include bp(sm, only) {
			margin: 0 auto 2rem;
			display: inherit;
		}
		@include bp(md) {
			float:right;
		}
		max-width: 50%;
		width: 300px;
		shape-outside: url(gary-dober.png);
		shape-margin: .5rem;
	}
	img[src*="signature"] {
		@include bp(sm, only) {
			margin: 0 auto;
			display: block;
		}
		max-width: 200px;
	}
	&:before {
	    position: absolute;
	    top: 60vh;
	    content: '';
	    width: 100%;
	    height: 10px;
	    background-image: linear-gradient(to bottom, $shade-medium-dark 0%, transparent 100%);
	}
}


section.services {
	ul {
		list-style-position: inside;
		// width: 600px;
		max-width: 300px;
		background: white;
		box-shadow: -5px 8px 5px $shade-medium;
		padding: 0;
		margin: 0 auto 2rem;
		border-radius: 0.1rem;
		position: relative;
		font-family: Mynerve;
		display: block;
		transform: rotate(-2deg);
		&:after {
			content: "";
			position: absolute;
			top: 98%;
			height: 20px;
			width: 100%;
			left: 0;
			background: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/23618/rip.svg) bottom;
			background-size: 200%;
			z-index: -1;
		}
		li {
			padding: 0.15rem 1rem;
			list-style-image: url(heavy-duty-truck.png);
			&:not(:last-child) {
				border-bottom: 1px solid lightblue;
			}
			&:first-child {
				margin-top: 0.25rem;
			}
			&:last-child {
				margin-bottom: -0.4rem;
			}
			::marker {
				content: url(heavy-duty-truck.png);
			}
		}
	}

	
}

section.rates {

}

section.contact {
	.text-section {
		 perspective: 1900px;
	}
	.contact-widget {
		width: 100%;
		@include bp(md) {
			width: 49%;
		}
		display: inline-flex;
		flex-direction: column;
		border: 1px solid $color-primary;
		padding: 3rem 1rem;
		border-radius: .25rem;
		margin-bottom: 2rem;
		&.phone {
			background-image: linear-gradient(to bottom, rgba($shade-lite,.9), rgba($shade-lite,.9)), url(phone-background.png);
			background-size: cover;
			background-position: center center;
			transform: rotateY(25deg);
			box-shadow: 5px 5px 3px $shade-medium;
		}
		&.email {
			background-image: linear-gradient(to bottom, rgba($shade-lite,.9), rgba($shade-lite,.9)), url(email-background.png);
			background-size: cover;
			background-position: center center;
			transform: rotateY(-25deg);
			box-shadow: -5px 5px 3px $shade-medium;
		}
		
		small {
			text-transform: uppercase;
			font-size: .75rem;
			font-weight: 700;
		}
		p.large {
			margin-bottom: 0;
			font-size: 3rem;
			@include bp(md) {
				font-size: 2rem;
			}
			@include bp(lg) {
				font-size: 2.5rem;
			}
			font-weight: 900;
			white-space: nowrap;
		}
	}

}

footer.mountains {
	@include row;
	@include full-width();
	position: relative;
	.column {
		@include column(sm 12)
	}
	img {
		margin-bottom: -0.5rem;
	}
	p {
		margin-bottom: 0;
		position: absolute;
		left: 50%;
		bottom: 10px;
		z-index: 1;
		font-family: Mynerve;
		color: $shade-lite;
		transform: translateX(-50%);
		background: rgba($shade-dark,0.75);
		padding: 5px;
		border-radius: 5px;
	}
}
